import React, { useState, useEffect } from 'react';
import { supabase } from '../supabaseClient';
import { useAuth } from './AuthContext';
import { useRouter, useSearchParams } from 'next/navigation';

// Declare Razorpay as a global object
declare global {
  interface Window {
    Razorpay: any;
  }
}

const PaymentForm = () => {
  const { user } = useAuth();
  const router = useRouter();
  const searchParams = useSearchParams();
  const registrationId = searchParams.get('registrationId');

  const [selectedEmi, setSelectedEmi] = useState('3'); // Default to 3 months EMI
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [paymentStatus, setPaymentStatus] = useState<string | null>(null);

  const coursePrice = 4699; // Total course price for course enrollment
  const examFee = 4200; // Fixed exam registration fee

  const emiOptions = {
    '3': { months: 3, amount: 1566 },
    '4': { months: 4, amount: 1175 },
    '6': { months: 6, amount: 783 },
  };

  useEffect(() => {
    // Load Razorpay script dynamically
    const script = document.createElement('script');
    script.src = 'https://checkout.razorpay.com/v1/checkout.js';
    script.async = true;
    document.body.appendChild(script);

    return () => {
      document.body.removeChild(script);
    };
  }, []);

  const handlePayment = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    setPaymentStatus(null);
    setLoading(true);

    if (!user) {
      setError('Please log in to make a payment.');
      setLoading(false);
      return;
    }

    let amountToPay = coursePrice; // Default for course enrollment
    let description = `RS-CIT Course Enrollment`;
    let paymentTable = 'payments';
    let updateData: any = {
      user_id: user.id,
      status: 'completed',
    };

    if (registrationId) {
      amountToPay = examFee;
      description = `RS-CIT Exam Registration`;
      paymentTable = 'exam_registrations';
      updateData = {
        payment_status: 'completed',
        razorpay_payment_id: '',
        razorpay_order_id: '',
        razorpay_signature: '',
      };
    } else {
      const currentEmi = emiOptions[selectedEmi as keyof typeof emiOptions];
      if (!currentEmi) {
        setError('Invalid EMI option selected.');
        setLoading(false);
        return;
      }
      amountToPay = currentEmi.amount;
      description = `RS-CIT Course - ${currentEmi.months} Months EMI`;
      updateData = {
        ...updateData,
        amount: currentEmi.amount,
        emi_months: currentEmi.months,
      };
    }

    const options = {
      key: process.env.NEXT_PUBLIC_RAZORPAY_KEY_ID, // Your Razorpay Key ID
      amount: amountToPay * 100, // Amount in paise
      currency: 'INR',
      name: 'RS-CIT Hybrid Micro-Learning Platform',
      description: description,
      order_id: '', // This will be generated by your backend
      handler: async function (response: any) {
        const { razorpay_payment_id, razorpay_order_id, razorpay_signature } = response;
        try {
          if (registrationId) {
            const { error: updateError } = await supabase.from(paymentTable)
              .update({
                payment_status: 'completed',
                razorpay_payment_id,
                razorpay_order_id,
                razorpay_signature,
              })
              .eq('id', registrationId);
            if (updateError) throw updateError;
          } else {
            const { error: updateError } = await supabase.from(paymentTable).insert({
              ...updateData,
              razorpay_payment_id,
              razorpay_order_id,
              razorpay_signature,
            });
            if (updateError) throw updateError;
          }
          setPaymentStatus('Payment successful!');
          // Optionally update user's profile or redirect
          router.push('/dashboard');
        } catch (err: any) {
          setError(err.message || 'Payment verification failed.');
          setPaymentStatus('Payment failed.');
        }
      },
      prefill: {
        name: user.user_metadata.full_name || '',
        email: user.email || '',
        contact: '', // User's phone number if available
      },
      notes: {
        address: 'Supabase Integration',
      },
      theme: {
        color: '#3399cc',
      },
    };

    const rzp1 = new window.Razorpay(options);
    rzp1.open();
    setLoading(false);
  };

  return (
    <div className="container mt-5">
      <div className="card">
        <div className="card-header"><h2>{registrationId ? 'Complete Exam Registration Payment' : 'Enroll in RS-CIT Course'}</h2></div>
        <div className="card-body">
          {error && <div className="alert alert-danger">{error}</div>}
          {paymentStatus && <div className="alert alert-info">{paymentStatus}</div>}
          <form onSubmit={handlePayment}>
            {!registrationId && (
              <div className="mb-3">
                <label htmlFor="emiPlan" className="form-label">Select EMI Plan</label>
                <select
                  className="form-control"
                  id="emiPlan"
                  value={selectedEmi}
                  onChange={(e) => setSelectedEmi(e.target.value)}
                  disabled={loading}
                >
                  {Object.entries(emiOptions).map(([key, value]) => (
                    <option key={key} value={key}>
                      {value.months} months EMI (₹{value.amount}/month)
                    </option>
                  ))}
                </select>
              </div>
            )}
            <p className="lead">Total Amount: ₹{registrationId ? examFee : coursePrice}</p>
            <button type="submit" className="btn btn-primary" disabled={loading}>
              {loading ? 'Processing...' : `Pay Now (₹${registrationId ? examFee : emiOptions[selectedEmi as keyof typeof emiOptions].amount})`}
            </button>
          </form>
        </div>
      </div>
    </div>
  );
};

export default PaymentForm;
